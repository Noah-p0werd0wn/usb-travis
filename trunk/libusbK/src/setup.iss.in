; libusbK (KMDF) USB Library - installer/upgrader script
; Copyright (c) 2011 Travis Robinson <libusbdotnet@gmail.com>
; ============================================================================

[Setup]
AppName				= libusbK
AppVerName			= libusbK-Installer v@TARGET_VERSION@
AppId				= libusbK-Installer
AppPublisher		= Travis Robinson 
AppPublisherURL		= http://libusb-win32.sourceforge.net
AppVersion			= @TARGET_VERSION@
VersionInfoVersion	= @TARGET_VERSION@
DefaultDirName		= {cf}\libusbK-Installer
UninstallFilesDir	= {cf}\libusbK-Installer
DisableFinishedPage = no
DisableDirPage		= yes
DisableReadyPage	= yes
UninstallLogMode    = overwrite
CreateUninstallRegKey = IsTaskSelected('upgrader\sys') or IsTaskSelected('upgrader\dll') or IsTaskSelected('upgrader\libusb0sys')
Uninstallable		  = IsTaskSelected('upgrader\sys') or IsTaskSelected('upgrader\dll') or IsTaskSelected('upgrader\libusb0sys')
Compression			= lzma/ultra64
SolidCompression	= yes
OutputDir			= @G_BUILD_OUTPUT_BASE_ABS_DIR@
OutputBaseFilename	= @K_LIBUSBK_SETUP_NAME@
PrivilegesRequired	= admin
WizardSmallImageFile = libusbK.bmp

; requires Win2k, or higher (x86 or amd64 only)
MinVersion						= 0, 5.0.2195 
ArchitecturesAllowed			= x86 x64
ArchitecturesInstallIn64BitMode	= x64

[Code]
function IsX64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paX64);
end;

function IsI64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paIA64);
end;

function IsX86: Boolean;
begin
  Result := not IsX64 and not IsI64;
end;

function Is64: Boolean;
begin
  Result := IsX64 or IsI64;
end;

function IntToBoolStr(val: Longint) : string;
begin
  if val <> 0 then
    Result := 'True';
  if val=0 then
    Result := 'False';
end;

procedure CheckInstallerResults();
var
  infDir : String;
  resultsIni : String;
  infIndex : Longint;
  Installer_Cancelled: Longint;
  Installer_Prepared: Longint;
  Installer_Installed: Longint;
begin
  resultsIni := ExpandConstant('{tmp}')+'\results.ini';
  Log('Results INI='+resultsIni);
  
  if IniKeyExists('InfWizard','Cancelled',resultsIni) then begin
    Installer_Cancelled :=  GetIniInt('InfWizard','Cancelled',0,0,0,resultsIni);
    Installer_Prepared :=  GetIniInt('InfWizard','Prepared',0,0,0,resultsIni);
    Installer_Installed :=  GetIniInt('InfWizard','Installed',0,0,0,resultsIni);
    
    Log('Installer_Cancelled = '+IntToStr(Installer_Cancelled));
    Log('Installer_Prepared  = '+IntToStr(Installer_Prepared));
    Log('Installer_Installed = '+IntToStr(Installer_Installed));
    
    infIndex := -1;
    repeat

      infIndex := infIndex+1;
      if not IniKeyExists('InfWizard','infDir'+IntToStr(infIndex),resultsIni) then break;

      infDir := GetIniString('InfWizard','InfDir'+IntToStr(infIndex),'',resultsIni);
      Log('InfDir'+IntToStr(infIndex)+' = '+infDir);
      
      if FileExists(infDir+'\installer_x86.exe') then
        DeleteFile(infDir+'\installer_x86.exe');
	    
      if FileExists(infDir+'\installer_x64.exe') then
	     DeleteFile(infDir+'\installer_x64.exe');

    until False;
  end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  Result := false;
  if PageID=wpFinished then
    Result := IsTaskSelected('installer');
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := true;
  if CurPageID = wpSelectTasks then begin
    if not IsTaskSelected('installer') and not IsTaskSelected('upgrader\sys') and not IsTaskSelected('upgrader\dll') and not IsTaskSelected('filter') then begin
      MsgBox('No tasks selected.',mbError, MB_OK);
      Result := false;
    end;
  end;
end;

[Tasks]
Name: installer; Description: "Create and install a libusb-win32 device driver a package."; Flags: exclusive;
Name: upgrader;  Description: "Upgrade libusb-win32 components"; Flags: exclusive;
Name: upgrader\sys;  Description: "Driver (libusbK.sys)";
Name: upgrader\libusb0sys;  Description: "Driver (libusb0.sys)";
Name: upgrader\dll;  Description: "User libraries (libusbK, @K_LIBUSB10_NAME@, libusb0)";
Name: filter; Description: "Install a libusb0 device filter. (advanced users)"; Flags: exclusive;

[Files]
; ============================================================================
; ** libusbK x86 (Windows 2000/XP and greater)
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\sys\x86\libusbK.sys"; DestDir: {sys}\drivers; Flags: uninsneveruninstall replacesameversion restartreplace promptifolder; Check: IsX86; Tasks: upgrader\sys;
Source: "@K_LIBUSB_W32_DIR@\bin\x86\libusb0.sys"; DestDir: {sys}\drivers; Flags: uninsneveruninstall replacesameversion restartreplace promptifolder; Check: IsX86; Tasks: upgrader\libusb0sys;

; 32 bit program support
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\x86\libusbK.dll"; DestDir: {sys}; Flags: replacesameversion restartreplace promptifolder; Check: IsX86; Tasks: upgrader\dll;
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\x86\libusb0.dll"; DestDir: {sys}; Flags: replacesameversion restartreplace promptifolder; Check: IsX86; Tasks: upgrader\dll;
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\x86\@K_LIBUSB10_NAME@.dll"; DestDir: {sys}; Flags: replacesameversion restartreplace promptifolder; Check: IsX86; Tasks: upgrader\dll;

; ============================================================================
; ** libusbK AMD 64bit
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\sys\amd64\libusbK.sys"; DestDir: {sys}\drivers; Flags: uninsneveruninstall replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\sys;
Source: "@K_LIBUSB_W32_DIR@\bin\x86\libusb0.sys"; DestDir: {sys}\drivers; Flags: uninsneveruninstall replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\libusb0sys;

; 32 bit program support
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\x86\libusbK.dll"; DestDir: {syswow64}; Flags: replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\dll;
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\x86\libusb0.dll"; DestDir: {syswow64}; Flags: replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\dll;
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\x86\@K_LIBUSB10_NAME@.dll"; DestDir: {syswow64}; Flags: replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\dll;

; 64bit bit program support
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\amd64\libusbK.dll"; DestDir: {sys}; Flags: replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\dll;
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\amd64\libusb0.dll"; DestDir: {sys}; Flags: replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\dll;
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\dll\amd64\@K_LIBUSB10_NAME@.dll"; DestDir: {sys}; Flags: replacesameversion restartreplace promptifolder; Check: IsX64; Tasks: upgrader\dll;

; ============================================================================
; ** libusbK/libusb0 inf-wizard
Source: "@G_BUILD_OUTPUT_BASE_ABS_DIR@\@DDKBUILDENV@\libusbK-inf-wizard.exe"; DestDir: {tmp}; Flags: deleteafterinstall; Tasks: installer;

; ============================================================================
; ** libusb0 filter installer
Source: "@K_LIBUSB_W32_DIR@\bin\x86\install-filter-win.exe"; DestDir: {tmp}; Flags: deleteafterinstall; Check: IsX86; Tasks: filter;
Source: "@K_LIBUSB_W32_DIR@\bin\amd64\install-filter-win.exe"; DestDir: {tmp}; Flags: deleteafterinstall; Check: IsX64; Tasks: filter;

[Run]
Filename: "{tmp}\libusbK-inf-wizard.exe"; Parameters: "--no-welcome"; Description: "libusbK Driver Installer"; Flags: hidewizard runascurrentuser; Tasks: installer; AfterInstall: CheckInstallerResults;
Filename: "{tmp}\install-filter-win.exe"; Description: "libusb0 Filter Installer"; Flags: hidewizard runascurrentuser; Tasks: filter;


