/*! \file lusbk_device_list.h
* \brief structs, typedefs, enums, defines, and functions for usb device enumeration and detection.
*/

#ifndef __LUSBK_DEVICE_LIST_H
#define __LUSBK_DEVICE_LIST_H

#include <windows.h>
#include <objbase.h>
#include "lusbk_common.h"

#include <PSHPACK1.H>

/*! \addtogroup lstk
* @{
*/

//!  Allocated length for all strings in a \ref KUSB_DEV_INFO structure.
#define LSTK_STRING_MAX_LEN 256

//! Common usb device information structure
typedef struct _KUSB_DEV_COMMON_INFO
{
	//! VendorID parsed from \ref KUSB_DEV_INFO::DeviceInstance
	UINT Vid;

	//! ProductID parsed from \ref KUSB_DEV_INFO::DeviceInstance
	UINT Pid;

	//! Interface number (valid for composite devices only) parsed from \ref KUSB_DEV_INFO::DeviceInstance
	UINT MI;

	// An ID that uniquely identifies a USB device.
	LPCSTR InstanceID;

} KUSB_DEV_COMMON_INFO;
//! Pointer to a \c KUSB_DEV_COMMON_INFO structure.
typedef KUSB_DEV_COMMON_INFO* PKUSB_DEV_COMMON_INFO;

//! USB device information element of a \ref KUSB_DEV_LIST collection.
/*!
* Contains information about a usd device retreived from the windows
*
* \attention This structure is semi-opaque.
*
* All \ref KUSB_DEV_INFO elements contain a \ref KUSB_USER_CONTEXT.
* This 32 bytes of user context space can be used by you, the developer, for any desired purpose.
*/
typedef struct _KUSB_DEV_INFO
{
	//! User context area
	KUSB_USER_CONTEXT UserContext;

	//! Common usb device information
	KUSB_DEV_COMMON_INFO Common;

	//! Driver id this device element is using
	LONG DrvId;

	//! Device interface GUID
	CHAR DeviceInterfaceGUID[LSTK_STRING_MAX_LEN];

	//! Device instance ID
	/*!
	* A Device instance ID has the following format:
	* [enumerator]\[enumerator-specific-device-ID]\[instance-specific-ID]
	* - [enumerator]
	*   - For USB device, the enumerator is always \c USB
	* - [enumerator-specific-device-ID]
	*   - Contains the vendor and product id (VID_xxxx&PID_xxxx)
	*   - If present, contains the usbccgp (windows composite device layer) interface number (MI_xx)
	* - [instance-specific-ID]
	*   - If the device is composite, contains a unqiue interface ID generated by Windows.
	*   - If the device is not composite and has a serial number, contains the devices serial number.
	*   - If the device does not have a serial number, contains a unqiue ID generated by Windows.
	*/
	CHAR DeviceInstance[LSTK_STRING_MAX_LEN];

	//! Class GUID
	CHAR ClassGUID[LSTK_STRING_MAX_LEN];

	//! Manufaturer name as specified in the INF file
	CHAR Mfg[LSTK_STRING_MAX_LEN];

	//! Device description as specified in the INF file
	CHAR DeviceDesc[LSTK_STRING_MAX_LEN];

	//! Driver service name
	CHAR Service[LSTK_STRING_MAX_LEN];

	//! Unique symbolic link identifier
	/*!
	* The \c SymbolicLink can be used to uniquely distinguish between device list elements.
	*/
	CHAR SymbolicLink[LSTK_STRING_MAX_LEN];

	//! physical device filename.
	/*!
	* This path is used with the Windows \c CreateFile() function to obtain on opened device handle.
	*/
	CHAR DevicePath[LSTK_STRING_MAX_LEN];

	//! see \ref KUSB_DEV_INFO_EL_SEARCH::EnableCompositeDeviceMode
	struct _KUSB_DEV_LIST* CompositeDevices;

} KUSB_DEV_INFO;
//! pointer to a \ref KUSB_DEV_INFO
typedef KUSB_DEV_INFO* PKUSB_DEV_INFO;

//! Device list collection
/*!
* \attention This structure is semi-opaque.
*/
typedef struct _KUSB_DEV_LIST
{
	//! User context area
	KUSB_USER_CONTEXT UserContext;

	//! Number of usb devices in this list
	ULONG DeviceCount;

} KUSB_DEV_LIST;
//! pointer to a \ref KUSB_DEV_LIST
typedef KUSB_DEV_LIST* PKUSB_DEV_LIST;

//! Initialization parameters for \ref LstK_Init
typedef struct _KUSB_DEV_LIST_INIT_PARAMS
{
	//! Enable listings for the raw device interface GUID.{A5DCBF10-6530-11D2-901F-00C04FB951ED}
	BOOL EnableRawDeviceInterfaceGuid;

	//! Enable composite device list mode
	/*!
	* When \c EnableCompositeDeviceMode is TRUE, composite devices are merged into a single \ref KUSB_DEV_LIST and
	* \ref KUSB_DEV_LIST::CompositeList is populated with the individual composite device elements.
	*
	*/
	BOOL EnableCompositeDeviceMode;

} KUSB_DEV_LIST_INIT_PARAMS, *PKUSB_DEV_LIST_INIT_PARAMS;

#include <POPPACK.H>


//! Enumeration callback typedef (or delegate).
/*!
* Use this typdef as a prototype for an enumeration function in \ref LstK_Enumerate.
* \param DeviceList
* The device list \c DeviceInfo belongs to
*
* \param DeviceInfo
* Device information
*
* \param Context
* User context that was passed into \ref LstK_Enumerate
*
*/
typedef BOOL KUSB_API ENUM_DEV_LIST_CB (
    __in PKUSB_DEV_LIST DeviceList,
    __in PKUSB_DEV_INFO DeviceInfo,
    __in PVOID Context);

// Pointer to a \c ENUM_DEV_LIST_CB
typedef ENUM_DEV_LIST_CB* PENUM_DEV_LIST_CB;

#ifdef __cplusplus
extern "C" {
#endif

//! Initializes a new usb device list.
	/*!
	*
	* \c LstK_Init populates \c DeviceList with connected usb devices that can be used by libusbK.
	*
	* \note if \ref LstK_Init returns TRUE, the device list must be freed with \ref LstK_Free when it is no longer needed.
	*
	* \param DeviceList
	* Pointer reference that will receive a populated device list.
	*
	* \param InitParameters
	* Search, filter, and listing options. see \c KUSB_DEV_LIST_INIT_PARAMS
	*
	* \returns On success, TRUE. Otherwise FALSE. Use \c GetLastError() to get extended error information.
	*/
	KUSB_EXP BOOL KUSB_API LstK_Init(
	    __deref_inout PKUSB_DEV_LIST* DeviceList,
	    __in PKUSB_DEV_LIST_INIT_PARAMS InitParameters);

//! Frees a usb device list.
	/*!
	* Frees all resources that were allocated to \c DeviceList by \ref LstK_Init.
	*
	* \note if \ref LstK_Init returns TRUE, the device list must be freed with \ref LstK_Free when it is no longer needed.
	*
	* \param DeviceList
	* The \c DeviceList to free.
	*
	* \returns NONE
	*/
	KUSB_EXP VOID KUSB_API LstK_Free(
	    __deref_inout PKUSB_DEV_LIST* DeviceList);

//! Enumerates \ref KUSB_DEV_INFO elements of a \ref KUSB_DEV_LIST.
	/*!
	*
	* Calls \c EnumDevListCB for each element in the device list or until \c EnumDevListCB returns FALSE.
	*
	* \param DeviceList
	* The \c DeviceList to enumerate.
	*
	* \param EnumDevListCB
	* Function to call for each iteration.
	*
	* \param PENUM_DEV_LIST_CB
	* Optional user context pointer.
	*
	* \returns On success, TRUE. Otherwise FALSE. Use \c GetLastError() to get extended error information.
	*/
	KUSB_EXP BOOL KUSB_API LstK_Enumerate(
	    __in PKUSB_DEV_LIST DeviceList,
	    __in PENUM_DEV_LIST_CB EnumDevListCB,
	    __in_opt PVOID Context);

//! Gets the \ref KUSB_DEV_INFO element for the current position.
	/*!
	*
	* \param DeviceList
	* The \c DeviceList to retrieve a current \ref KUSB_DEV_INFO for.
	*
	* \param DeviceInfo
	* The device information.
	*
	*
	* \returns On success, TRUE. Otherwise FALSE. Use \c GetLastError() to get extended error information.
	*/
	KUSB_EXP BOOL KUSB_API LstK_Current(
	    __in PKUSB_DEV_LIST DeviceList,
	    __deref_out PKUSB_DEV_INFO* DeviceInfo);

//! Advances the device list current \ref KUSB_DEV_INFO position.
	/*!
	*
	* \param DeviceList
	* The \c DeviceList to retrieve a current \ref KUSB_DEV_INFO for.
	*
	* \param DeviceInfo
	* The device information.
	*
	* \returns On success, TRUE. Otherwise FALSE. Use \c GetLastError() to get extended error information.
	*/
	KUSB_EXP BOOL KUSB_API LstK_Next(
	    __inout PKUSB_DEV_LIST DeviceList,
	    __deref_out_opt PKUSB_DEV_INFO* DeviceInfo);

//! Resets the device list current \ref KUSB_DEV_INFO position.
	/*!
	*
	* \param DeviceList
	* The \c DeviceList to retrieve a current \ref KUSB_DEV_INFO for.
	*
	* \returns On success, TRUE. Otherwise FALSE. Use \c GetLastError() to get extended error information.
	*/
	KUSB_EXP VOID KUSB_API LstK_Reset(
	    __inout PKUSB_DEV_LIST DeviceList);

//! Locks access to the device list.
	/*!
	*
	* \param DeviceList
	* The \c DeviceList to lock.
	*
	* \param wait
	* If FALSE, do not wait for the lock to acquire, instead return eith FALSE.
	*
	* \returns TRUE of the device list was locked, Otherwise FALSE.
	*/
	KUSB_EXP BOOL KUSB_API LstK_Lock(
	    __in PKUSB_DEV_LIST DeviceList,
	    __in BOOL wait);

//! Unlocks access to the device list.
	/*!
	*
	* \param DeviceList
	* The \c DeviceList to lock.
	*
	* \returns On success, TRUE. Otherwise FALSE.
	*/
	KUSB_EXP BOOL KUSB_API LstK_Unlock(
	    __in PKUSB_DEV_LIST DeviceList);

#ifdef __cplusplus
}
#endif

/*! @} */
#endif
